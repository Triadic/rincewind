<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../setup.php';

require_class('ProfilerTimer', 'Profiler');

/**
 * Test class for ProfilerTimer.
 * Generated by PHPUnit on 2011-04-19 at 14:02:29.
 */
class ProfilerTimerNaturalTest extends PHPUnit_Framework_TestCase {

  /**
   * @var ProfilerTimer
   */
  protected $profilerTimer;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->profilerTimer = new ProfilerTimer('Context name');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * @covers ProfilerTimer::__construct
   * @covers ProfilerTimer::getContext
   */
  public function testConstructorSetsContext() {
    self::assertSame('Context name', $this->profilerTimer->getContext());
  }
  /**
   * @covers ProfilerTimer::__construct
   * @covers ProfilerTimer::getSection
   */
  public function testConstructorSetsSectionToNullIfNotSpecified() {
    self::assertNull($this->profilerTimer->getSection());
  }
  
  /**
   * @covers ProfilerTimer::__construct
   * @covers ProfilerTimer::getStartTime
   */
  public function testConstructorSetsStartTime() {
    self::assertEquals(microtime(true), $this->profilerTimer->getStartTime(), 'The microtime should be nearly the same. If this test fails, try to run again.', 0.01);
  }

  /**
   * @covers ProfilerTimer::end
   * @covers ProfilerTimer::getEndTime
   */
  public function testEnd() {
    usleep(5000);
    $this->profilerTimer->end();
    self::assertEquals(microtime(true), $this->profilerTimer->getEndTime(), 'The microtime should be nearly the same. If this test fails, try to run again.', 0.001);
  }

  /**
   * @covers ProfilerTimer::end
   * @covers ProfilerTimer::getDuration
   */
  public function testEndSetsDuration() {
    usleep(5000);
    $this->profilerTimer->end();
    self::assertGreaterThanOrEqual(0.005, $this->profilerTimer->getDuration());
  }
  
  /**
   * @covers ProfilerTimer::getDuration
   */
  public function testGetDurationReturnsNullIfNotFinished() {
    self::assertNull($this->profilerTimer->getDuration());
  }

  /**
   * @covers ProfilerTimer::isPaused
   * @covers ProfilerTimer::getPauseStartTime
   */
  public function testIsPaused() {
    self::assertSame(false, $this->profilerTimer->isPaused());
    self::assertNull($this->profilerTimer->getPauseStartTime());
    $this->profilerTimer->pause();
    self::assertSame(true, $this->profilerTimer->isPaused());
  }

  /**
   * @covers ProfilerTimer::pause
   */
  public function testPauseSetsPauseStartTime() {
    $this->profilerTimer->pause();
    self::assertEquals(microtime(true), $this->profilerTimer->getPauseStartTime(), '', 0.01);
  }

  /**
   * @covers ProfilerTimer::resume
   */
  public function testResume() {
    $this->profilerTimer->pause();
    self::assertSame(true, $this->profilerTimer->isPaused());
    $this->profilerTimer->resume();
    self::assertSame(false, $this->profilerTimer->isPaused());
    self::assertNull($this->profilerTimer->getPauseStartTime());
  }

  /**
   * @covers ProfilerTimer::getTotalPauseDuration
   */
  public function testGetTotalPauseDuration() {
    $this->profilerTimer->pause();
    usleep(5000);
    $this->profilerTimer->resume();
    self::assertGreaterThanOrEqual(0.005, $this->profilerTimer->getTotalPauseDuration());
    $this->profilerTimer->pause();
    usleep(5000);
    $this->profilerTimer->resume();
    self::assertGreaterThanOrEqual(0.01, $this->profilerTimer->getTotalPauseDuration());
  }

  /**
   * @covers ProfilerTimer::pause
   */
  public function testPauseDoesNothingIfAlreadyPaused() {
    $this->profilerTimer->pause();
    $firstPausetime = $this->profilerTimer->getPauseStartTime();
    usleep(50);
    $this->profilerTimer->pause();
    self::assertSame($firstPausetime, $this->profilerTimer->getPauseStartTime());
  }

  
  /**
   * @covers ProfilerTimer::getDuration
   */
  public function testGetTotalDurationSubstractsPause() {
    $this->profilerTimer->pause();
    usleep(500000); // sleeps 0.5 s
    $this->profilerTimer->resume();
    $this->profilerTimer->end();
    self::assertEquals($this->profilerTimer->getEndTime() - $this->profilerTimer->getStartTime() - 0.5, $this->profilerTimer->getDuration(), '', 0.001);
  }
  
  /**
   * @covers ProfilerTimer::end
   */
  public function testEndResumesTimerFirst() {
    $this->profilerTimer->pause();
    self::assertTrue($this->profilerTimer->isPaused());
    $this->profilerTimer->end();
    self::assertFalse($this->profilerTimer->isPaused());
  }

}
