<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../library/File/ImageFile.php';

/**
 * Test class for ImageFile.
 * Generated by PHPUnit on 2011-01-20 at 17:10:13.
 */
class ImageFileTest extends PHPUnit_Framework_TestCase {

  /**
   * @var ImageFile
   */
  protected $imageFile;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->imageFile = new ImageFile(dirname(__FILE__) . '/test.jpg');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  public function testSetAndGetWidth() {
    $this->imageFile->setWidth(33);
    self::assertEquals(33, $this->imageFile->getWidth());
    $this->imageFile->setWidth(45);
    self::assertEquals(45, $this->imageFile->getWidth());
  }

  public function testSetAndGetHeight() {
    $this->imageFile->setHeight(33);
    self::assertEquals(33, $this->imageFile->getHeight());
    $this->imageFile->setHeight(45);
    self::assertEquals(45, $this->imageFile->getHeight());
  }

  public function testSetAndGetDestinationWidth() {
    $this->imageFile->setDestinationWidth(33);
    self::assertEquals(33, $this->imageFile->getDestinationWidth());
    $this->imageFile->setDestinationWidth(45);
    self::assertEquals(45, $this->imageFile->getDestinationWidth());
  }

  public function testSetAndGetDestinationHeight() {
    $this->imageFile->setDestinationHeight(33);
    self::assertEquals(33, $this->imageFile->getDestinationHeight());
    $this->imageFile->setDestinationHeight(45);
    self::assertEquals(45, $this->imageFile->getDestinationHeight());
  }


  public function testGetRectanglesToResize_centeredCrop() {
    list($srcRectangle, $trgRectangle) = ImageFile::getRectanglesToResize(array(400, 400), array(200, 100), true, true, array(50.0, 50.0));
    self::assertEquals($srcRectangle->width, 400);
    self::assertEquals($srcRectangle->height, 200);
    self::assertEquals($srcRectangle->x, 0);
    self::assertEquals($srcRectangle->y, 100);
    self::assertEquals($trgRectangle->width, 200);
    self::assertEquals($trgRectangle->height, 100);
    self::assertEquals($trgRectangle->x, 0);
    self::assertEquals($trgRectangle->y, 0);
  }
  
  

  public function testGetRectanglesToResize_topCrop() {
    list($srcRectangle, $trgRectangle) = ImageFile::getRectanglesToResize(array(400, 400), array(200, 100), true, true, array(50.0, 0.0));
    self::assertEquals($srcRectangle->width, 400);
    self::assertEquals($srcRectangle->height, 200);
    self::assertEquals($srcRectangle->x, 0);
    self::assertEquals($srcRectangle->y, 0);
    self::assertEquals($trgRectangle->width, 200);
    self::assertEquals($trgRectangle->height, 100);
    self::assertEquals($trgRectangle->x, 0);
    self::assertEquals($trgRectangle->y, 0);
  }
  
  public function testGetRectanglesToResize_bottomCrop() {
    // Bottom crop
    list($srcRectangle, $trgRectangle) = ImageFile::getRectanglesToResize(array(400, 400), array(200, 100), true, true, array(50.0, 100.0));
    self::assertEquals($srcRectangle->x, 0);
    self::assertEquals($srcRectangle->y, 200);
  }
  
  public function testGetRectanglesToResize_noScaleWithCrop() {
    $this->setExpectedException('ImageFileTakeOriginalException');
    list($srcRectangle, $trgRectangle) = ImageFile::getRectanglesToResize(array(600, 602), array(1000, 1000), true, true, array(50.0, 50.0));
  }

  public function testGetRectanglesToResize_noScaleWithoutCrop() {
    $this->setExpectedException('ImageFileTakeOriginalException');
    list($srcRectangle, $trgRectangle) = ImageFile::getRectanglesToResize(array(400, 500), array(600, 600), false, true, array(50.0, 50.0));
  }

  public function testGetRectanglesToResize_correctScaleWithoutCrop() {
    list($srcRectangle, $trgRectangle) = ImageFile::getRectanglesToResize(array(400, 400), array(200, 100), false, true, array(0, 0));
    self::assertEquals($srcRectangle->width, 400);
    self::assertEquals($srcRectangle->height, 400);
    self::assertEquals($srcRectangle->x, 0);
    self::assertEquals($srcRectangle->y, 0);
    self::assertEquals($trgRectangle->width, 100);
    self::assertEquals($trgRectangle->height, 100);
    self::assertEquals($trgRectangle->x, 0);
    self::assertEquals($trgRectangle->y, 0);
    
  }
  

}
